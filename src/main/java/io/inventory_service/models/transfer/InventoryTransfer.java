package io.inventory_service.models.transfer;

import io.inventory_service.datatypes.TransferReason;
import io.inventory_service.datatypes.TransferStatus;
import lombok.*;
import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

import java.time.Instant;
import java.util.UUID;

/**
 * Header for an inter-warehouse / bin move.
 * One StockTransfer can have many StockTransferItems.
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table("inventory_transfer")
public class InventoryTransfer {

    /**
     * Surrogate PK (generated by DB).
     */
    @Id
    private UUID id;

    /**
     * Business code, e.g. "TRF-2025-07-22-0008".
     */
    @Column("transfer_code")
    private String transferCode;

    @Column("source_warehouse_id")
    private String sourceWarehouseId;

    @Column("destination_warehouse_id")
    private String destinationWarehouseId;

    @Column("requested_by_user_id")
    private String requestedByUserId;


    /**
     * Optional finer-grained slots / bins.
     */
    @Column("source_location_id")
    private String sourceLocationId;

    @Column("destination_location_id")
    private String destinationLocationId;

    @Column("approver_user_id") // If transfers require approval
    private String approverUserId;

    /**
     * Requesting user or system.
     */
    @Column("requested_by")
    private String requestedBy;

    @Column("transfer_timestamp")
    private Instant transferTimestamp;

    @Column("reason")
    private TransferReason transferReason;          // REBALANCE, STORE_REPLENISH, â€¦

    @Column("status")
    private TransferStatus transferStatus;          // DRAFT, IN_TRANSIT, COMPLETED, CANCELLED

    @Column("notes")
    private String notes; // Any additional notes about the transfer


    /* --- simple audit --- */
    @Column("created_at")
    private Instant createdAt;

    @Column("created_by")
    private String createdBy;

    @Column("updated_at")
    private Instant updatedAt;

    public void onCreate(String userId) {
        this.createdAt = Instant.now();
        this.createdBy = userId;
        this.updatedAt = Instant.now();
    }

    public void onUpdate() {
        this.updatedAt = Instant.now();
    }

}