plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'io.inventory-service'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	kafkaVersion = '3.7.0'          // same line as your KRaft container
}

repositories {
	mavenCentral()
}

dependencies {
	/* ── Spring Boot reactive stack ─────────────────────────────────────────── */
	implementation "org.springframework.boot:spring-boot-starter-webflux"
	implementation "org.springframework.boot:spring-boot-starter-data-r2dbc"
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	/* ── Database & migrations ─────────────────────────────────────────────── */
	implementation "name.nkonev.r2dbc-migrate:r2dbc-migrate-spring-boot-starter:3.2.0"
	implementation 'org.postgresql:r2dbc-postgresql:1.0.4.RELEASE' // Or a newer version

	/* ── Mapping / utility ─────────────────────────────────────────────────── */
	implementation "org.mapstruct:mapstruct:1.5.5.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"

	/* ── JSON (managed by BOM) ─────────────────────────────────────────────── */
	implementation platform("com.fasterxml.jackson:jackson-bom:2.19.0")
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation "com.fasterxml.jackson.core:jackson-core"
	implementation "com.fasterxml.jackson.core:jackson-annotations"
	implementation "org.eclipse:yasson:3.0.4"
	/* ── Messaging & resilience ────────────────────────────────────────────── */
	implementation "io.projectreactor.kafka:reactor-kafka:1.3.19"
	implementation "io.github.resilience4j:resilience4j-reactor:2.2.0"
	implementation 'org.apache.commons:commons-pool2'            // redis conn pool

	implementation 'org.springframework.kafka:spring-kafka'
	implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.apache.commons:commons-pool2'            // redis conn pool


	implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	/* ── Observability / docs ──────────────────────────────────────────────── */
	implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0"
	runtimeOnly   "io.micrometer:micrometer-registry-prometheus"

	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")

	/* ── Native resolver for Apple Silicon (optional but handy) ────────────── */
	runtimeOnly "io.netty:netty-resolver-dns-native-macos:4.1.121.Final:osx-aarch_64"

	/* ── Testing ───────────────────────────────────────────────────────────── */
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "io.projectreactor:reactor-test"
	testImplementation "org.testcontainers:junit-jupiter"
	testRuntimeOnly  "org.junit.platform:junit-platform-launcher"
}

tasks.named('test') {
	useJUnitPlatform()
}
